[probe]
pin: gpio29
speed: 7
x_offset: 0
y_offset: 42
z_offset: 8.164
samples: 2

############################################
#              ATTACH PROBE
############################################
[gcode_macro Attach_Probe]
description: Attaches Klicky Probe
gcode:
    SAVE_GCODE_STATE NAME=Saved_state
    G90
    QUERY_PROBE
    Attach_Probe_Sub
    QUERY_PROBE
    Attach_Probe_Verify
    RESTORE_GCODE_STATE NAME=Saved_state
    
[gcode_macro Attach_Probe_Sub]
gcode:
    {% set probe_attached = printer.save_variables.variables.probe_attached %}
    {% set safe_x = printer["gcode_macro _User_Variables"].safe_x|default(30) %}
    {% set safe_y = printer["gcode_macro _User_Variables"].safe_y|default(30) %}
    {% set safe_z = printer["gcode_macro _User_Variables"].safe_z|default(10) %}
    {% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(2) %}
    {% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(2) %}
    {% set dock_speed = printer["gcode_macro _User_Variables"].dock_speed|default(1000) %}
    {% set fast_travel_speed = printer["gcode_macro _User_Variables"].fast_travel_speed|default(6000) %}
    {% set slow_travel_speed = printer["gcode_macro _User_Variables"].slow_travel_speed|default(2000) %}
    {% set z_lift_speed = printer["gcode_macro _User_Variables"].z_lift_speed|default(1000) %}

    # Check if xy homed
    {% if not 'xy' in printer.toolhead.homed_axes %}
      { action_raise_error("Must Home X and Y Axis First!") }
      _KlickyDebug msg="Attach_Probe Axis not homed"
    # NOT probe_attached and query shows TRIGGERED
    {% elif probe_attached == 0 and printer.probe.last_query %}
      _KlickyDebug msg="Attach_Probe going to attach probe"
    
      # Move up to a safe spot if needed (X,Y)
      {% if printer.toolhead.position.x < safe_x and printer.toolhead.position.y > (printer.toolhead.axis_maximum.y - safe_y) %}
        _KlickyDebug msg="Attach_Probe Moving to safe area"
        G1 Y{printer.toolhead.axis_maximum.y - safe_y} F{slow_travel_speed}
      {% endif %}
      # Lift up to a safe spot if needed (Z)
      {% if printer.toolhead.position.z < safe_z and 'z' in printer.toolhead.homed_axes %}
        G1 Z{safe_z} F{z_lift_speed}
      {% endif %}

      # Move into position before attaching
      _KlickyDebug msg="Attach_Probe Moving into position"
      G1 X{dockmove_x} Y{printer.toolhead.axis_maximum.y - safe_y} F{fast_travel_speed}

      # Move to attach
      _KlickyDebug msg="Attach_Probe Moving to attach"
      G1 Y{printer.toolhead.axis_maximum.y - dockmove_y} F{dock_speed}

      # Back off slowly
      _KlickyDebug msg="Attach_Probe Backing away"
      G1 Y{printer.toolhead.axis_maximum.y - safe_y} F{dock_speed}
    # NOT probe_attached but query shows OPEN
    {% elif probe_attached == 0 and not printer.probe.last_query %}
        _KlickyDebug msg="Attach_Probe Variable shows not attached, but endstop query shows otherwise"
        { action_raise_error("Variable shows not attached, but endstop query shows otherwise") }
    # probe_attached but query shows TRIGGERED
    {% elif probe_attached == 1 and printer.probe.last_query %}
        _KlickyDebug msg="Attach_Probe Variable shows not attached, but endstop query shows TRIGGERED"
        { action_raise_error("Variable shows not attached, but endstop query shows TRIGGERED") }
    # probe_attached and query shows OPEN
    {% elif probe_attached == 1 and not printer.probe.last_query %}
      _KlickyDebug msg="Attach_Probe Already attached"
    {% endif %}
[gcode_macro Attach_Probe_Verify]
gcode:
    # Verify probe got attached
    {% if not printer.query_endstops.last_query %}
      _KlickyDebug msg="Attach_Probe Successfully attached"
      SAVE_VARIABLE VARIABLE=probe_attached VALUE=1
    {% else %}
      _KlickyDebug msg="Attach_Probe ERROR Endstop status showing triggered after attach"
      { action_raise_error("Endstop status showing triggered after attach") }
    {% endif %}


############################################
#              DOCK PROBE
############################################
[gcode_macro Dock_Probe]
description: Docks Klicky Probe
gcode:
    SAVE_GCODE_STATE NAME=Saved_state
    G90
    QUERY_PROBE
    Dock_Probe_Sub
    QUERY_PROBE
    Dock_Probe_Verify
    RESTORE_GCODE_STATE NAME=Saved_state
    
[gcode_macro Dock_Probe_Sub]
description: Docks Klicky Probe
gcode:
    {% set probe_attached = printer.save_variables.variables.probe_attached %}
    {% set safe_x = printer["gcode_macro _User_Variables"].safe_x|default(30) %}
    {% set safe_y = printer["gcode_macro _User_Variables"].safe_y|default(30) %}
    {% set safe_z = printer["gcode_macro _User_Variables"].safe_z|default(10) %}
    {% set unusable_y = printer["gcode_macro _User_Variables"].unusable_y|default(20) %}
    {% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(2) %}
    {% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(2) %}
    {% set dock_speed = printer["gcode_macro _User_Variables"].dock_speed|default(1000) %}
    {% set fast_travel_speed = printer["gcode_macro _User_Variables"].fast_travel_speed|default(6000) %}
    {% set slow_travel_speed = printer["gcode_macro _User_Variables"].slow_travel_speed|default(2000) %}
    {% set z_lift_speed = printer["gcode_macro _User_Variables"].z_lift_speed|default(1000) %}

    SAVE_GCODE_STATE NAME=Saved_state
    # Check if xy homed
    {% if not 'xy' in printer.toolhead.homed_axes %}
      { action_raise_error("Must Home X and Y Axis First!") }
      _KlickyDebug msg="Dock_Probe Axis not homed"
    # probe_attached and query shows OPEN
    {% elif probe_attached == 1 and not printer.probe.last_query %}
      _KlickyDebug msg="Dock_Probe going to dock probe"
      
      # Move up to a safe spot if needed
      {% if printer.toolhead.position.x < safe_x and printer.toolhead.position.y > (printer.toolhead.axis_maximum.y - safe_y) %}
        _KlickyDebug msg="Dock_Probe Moving to safe area"
        G1 Y{printer.toolhead.axis_maximum.y - safe_y} F{slow_travel_speed}
      {% endif %}
      # Lift up to a safe spot if needed (Z)
      {% if printer.toolhead.position.z < safe_z and 'z' in printer.toolhead.homed_axes %}
        G1 Z{safe_z} F{z_lift_speed}
      {% endif %}

      # Move into position before attaching
      _KlickyDebug msg="Dock_Probe Moving into position"
      G1 X{dockmove_x} Y{printer.toolhead.axis_maximum.y - safe_y} F{fast_travel_speed}

      # Move to dock
      _KlickyDebug msg="Dock_Probe Moving to attach"
      G1 Y{printer.toolhead.axis_maximum.y - dockmove_y} F{dock_speed}

      # Swipe off
      _KlickyDebug msg="Dock_Probe Swipe off"
      G1 X{printer.toolhead.axis_maximum.x / 4} F{dock_speed * 2}
      G1 Y{printer.toolhead.axis_maximum.y - unusable_y} F{dock_speed * 2}

    # probe_attached but query shows TRIGGERED
    {% elif probe_attached == 1 and printer.probe.last_query %}
        _KlickyDebug msg="Dock_Probe Variable shows attached, but endstop query shows otherwise"
        { action_raise_error("Variable shows attached, but endstop query shows otherwise") }
    # NOT probe_attached but query shows OPEN
    {% elif probe_attached == 0 and not printer.probe.last_query %}
        _KlickyDebug msg="Dock_Probe Variable shows not attached, but endstop query shows OPEN"
        { action_raise_error("Variable shows not attached, but endstop query shows OPEN") }
    # NOT probe_attached and query shows TRIGGERED
    {% elif probe_attached == 0 and printer.probe.last_query %}
      _KlickyDebug msg="Dock_Probe Already docked"
    {% endif %}
    RESTORE_GCODE_STATE NAME=Saved_state

[gcode_macro Dock_Probe_Verify]
gcode:
    # Verify probe got docked
    {% if printer.probe.last_query %}
      _KlickyDebug msg="Dock_Probe Successfully docked"
      SAVE_VARIABLE VARIABLE=probe_attached VALUE=0
    {% else %}
      _KlickyDebug msg="Dock_Probe ERROR Endstop status showing open after dock"
      { action_raise_error("Endstop status showing open after dock") }
    {% endif %}


############################################
[gcode_macro PROBE_ACCURACY]
rename_existing: _PROBE_ACCURACY
description:Probe Z-height accuracy at current XY position with klicky automount
gcode:
    {% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
    {% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}
    {% set fast_travel_speed = printer["gcode_macro _User_Variables"].fast_travel_speed|default(6000) %}
    {% set max_x = printer.toolhead.axis_maximum.x %}
    {% set max_y = printer.toolhead.axis_maximum.y %}
    {% set samples = params.SAMPLES|default(10)|int %}


    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X, Y and Z Axis First!") }
    {% endif %}
    _KlickyDebug msg="probe_accuracy Axis homed"

    G1 X{ printer.toolhead.axis_maximum.x / 2 - probe_offset_x } Y{ printer.toolhead.axis_maximum.y / 2 - probe_offset_y } F{fast_travel_speed}
    
    # Protect against PROBE_ACCURACY performed from outside the bed
    {% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
          or printer['gcode_move'].position.y < - probe_offset_y
          or printer['gcode_move'].position.x > (max_x - probe_offset_x)
          or printer['gcode_move'].position.x < - probe_offset_x %}
      { action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED!") }
    {% endif%}

    Attach_Probe

    _KlickyDebug msg="probe_accuracy calling klipper probe accuracy"
    _PROBE_ACCURACY SAMPLES={samples}

    #Dock_Probe

############################################
#                 DEBUG
############################################
[gcode_macro _KlickyDebug]
gcode:
    {% set message  = params.MSG %}
    {% set debug = printer.save_variables.variables.debug %}

    {% if debug %}
        { action_respond_info(message) }
    {% endif %}
