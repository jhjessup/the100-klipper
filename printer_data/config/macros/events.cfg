[gcode_macro START_PRINT]
description: Commands to run when a print is started
gcode:        
    # Input parameters from slicer
    {% set hotend_temp = params.HOTEND|default(200)|int %} ; Extruder temperature
    {% set bed_temp = params.BED|default(60)|int %} ; Bed temperature
    {% set purge = params.PURGE|default(0)|int %} ; Whether to purge line or not ( 0 / 1 )
    {% set start_x = params.START_X|default(1)|int %} ; Starting x position, which affects initial parking and purge line
    {% set probe = params.PROBE|default(0)|int %} ; Whether to created bed mesh ( 0 / 1 )

   {% if printer.heater_bed.temperature < (bed_temp-10) %}
	M140 S{bed_temp-10}
   {% endif %}

    # Read klipper config file value
    {% set machine_depth = printer.configfile.config.stepper_y.position_max|float %} ; Max Y position

    # These values are used with Klicky probe, and it pulls values from homing.cfg
    {% set unusable_y = printer["gcode_macro _User_Variables"].unusable_y|default(0) %} # Value of Y position lost due to klicky probe dock in the back
    {% set klicky = printer["gcode_macro _User_Variables"].klicky|default(False) %} # Whether klicky probe is enabled or not

    # These values are read from variables.cfg

    # Reset some values, in case the printer somehow hits max idle time and decides to turn off, if auto-turnoff is configured
    CLEAR_PAUSE
    remove_idle_timer
    G90 ; Absolute positioning
    G1 ; set units to millimeters

    M140 S{bed_temp} ; Set Heat Bed Temperature
    M190 S{bed_temp} ; Wait for Heat Bed temperature

    {% if probe == 1 %} ; If printer has a probe, determine whether to create bed mesh or use existing
      {% set last_probe = printer.save_variables.variables.last_probe|int %} ; Find the last time bed mesh was taken and use as a counter
      {action_respond_info("Last Probe was %.0f prints ago" % (last_probe))}
      {% set last_probe = last_probe + 1 %} ; Increment counter
      {% if last_probe >= printer.save_variables.variables.prints_til_probe|int %} ; Determine if it is time to take a create a new bed mesh
        M118 Recreating Bed Mesh
        BED_MESH SAVE=0
        SAVE_VARIABLE VARIABLE=last_probe VALUE=1
        SET_GCODE_VARIABLE MACRO=END_PRINT VARIABLE=save VALUE=1 ; Save bed mesh at the end of print and restart printer
      {% else %} ; If not time to recreate bed mesh, just save the incremented last_probe value
        SAVE_VARIABLE VARIABLE=last_probe VALUE={last_probe}
        SET_GCODE_VARIABLE MACRO=END_PRINT VARIABLE=save VALUE=0 ; Do not save config/restart at end of print
      {% endif %}
      BED_MESH_PROFILE LOAD=default ; Load Default Saved Mesh
    {% else %} ; If printer does not have a probe
      SET_GCODE_VARIABLE MACRO=END_PRINT VARIABLE=save VALUE=0 ; Do not save config/restart at end of print
      BED_MESH_CLEAR ; Since there is no probe, clear bed meshes
    {% endif %}
    
    {% if klicky %} ; If printer has a clicky, dock the probe to prepare to print
      Dock_Probe
      QUERY_PROBE
      Dock_Probe_Verify
    {% endif %}
    
    M104 S{hotend_temp} ; Set Extruder temperature

    G92 E0 ; Reset Extruder
    G1 X{start_x} Y30 Z0.3 F5000.0 ; Move to start position

    M109 S{hotend_temp} ; Wait for Extruder temperature
    
    # Prime/purge line
    {% if purge == 1 %}
      {% if (printer.toolhead.axis_maximum.y - unusable_y) < prime_depth %}
        {% set prime_depth = printer.toolhead.axis_maximum.y - unusable_y %} ; Determines how far back to prime in Y direction
      {% endif %}
      G1 X{start_x} Y{prime_depth} Z0.3 F900.0 E15 ; Draw the first line
      G1 X{start_x + 0.3} Y{prime_depth} Z0.3 F5000.0 ; Move to side a little
      G1 X{start_x + 0.3} Y20 Z0.3 F900.0 E30 ; Draw the second line
      G92 E0 ; Reset Extruder
      G1 Z2.0 F3000 ; Move Z Axis up little to prevent scratching of Heat Bed
      G1 X{start_x + 4.6} Y20 Z0.3 F5000.0 ; Move over to prevent blob squish
    {% endif %}


[gcode_macro END_PRINT]
description: Commands to run when a print ends
variable_save: 0
gcode:
  {% set machine_depth = params.MACHINE_DEPTH|default(printer.configfile.config.stepper_y.position_max)|int %}
  {% set unusable_y = printer["gcode_macro _User_Variables"].unusable_y|default(10) %}
  {% set machine_depth = machine_depth - unusable_y %} ; reduce to prevent potential damage

  # Input variables from slicer
  {% set z_bed = params.Z_BED|default(0)|int %} ; ( 0 / 1 ) If the printer's bed moves down for Z+ and up for Z-, setting this to 1 will lower the bed down near the bottom. This is useful in case the Z is belt driven and may drop the bed when steppers are disabled
  {% set retract = params.RETRACT|default(2.0)|float %} ; Retract distance when parking toolhead
  {% set retract_speed = params.RETRACT_SPEED|default(20)|int %} ; Retract speed when parking toolhead
  {% set slow_cooldown = params.SLOW_COOLDOWN|default(0)|int %} ; For ASA/ABS where temperature dropping too fast can cause warping, this will slowly lower bed temp over time. Can be fine tuned, check slow cooldown section below for more vars to pass.

  # These values are read from variables.cfg

  # Calculate safe z lift position so that we dont exceed max z when parking toolhead
  {% set z = params.Z|default(30)|float %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% set lift_z = z|abs %}
  {% if act_z < (max_z - lift_z) %}
      {% set z_safe = lift_z - 0.2 %}
  {% else %}
      {% set z_safe = max_z - act_z - 0.2 %}
  {% endif %}


  G91 ;Relative positioning
  G1 E-{retract} F{retract_speed*60} ;Retract a bit
  G1 E-{retract} Z0.2 F{retract_speed*60} ;Retract and raise Z
  #G1 X5 Y5 F3000 ;Wipe out
  G1 Z{z_safe} ;Raise Z more
  G90 ;Absolute positioning

  G1 X0 Y{machine_depth} ; Present print

  {% if z_bed == 1 and printer.toolhead.position.z > (printer.toolhead.axis_maximum.z - 30) %} ; Lower bed if required for printers where +z position lowers the bed
    G1 Z{printer.toolhead.axis_maximum.z - 30}
  {% endif %}

  M84 X Y E ;Disable all steppers but Z
  M104 S0 ;Turn-off hotend
  M106 S0 ;Turn-off fan
  M140 S0 ;Turn-off bed

  {% if printer["gcode_macro END_PRINT"].save == 1 %} ; Whether to save config and restart printer. This will be true if bed mesh was created during this print.
    SAVE_CONFIG
    #UPDATE_DELAYED_GCODE ID=delayed_restart DURATION=3
  {% endif %}
  

[gcode_macro PAUSE]
description: Commands to run when a print is paused
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  
  ##### Park Positions #####
  {% set x = params.X|default(1) %} 
  #{% set y = params.Y|default(3) %}
  {% set z = params.Z|default(10)|float %}
  {% set e = params.E|default(1) %}
  ##### calculate safe z lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% set lift_z = z|abs %}
  {% if act_z < (max_z - lift_z) %}
      {% set z_safe = lift_z %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}


  SAVE_GCODE_STATE NAME=PAUSE_state ; Save current gcode state
  {% if rgb == 1 %}
    status_busy
  {% endif %}
  M118 Pausing
  PAUSE_BASE ; Pause
  G91 ; Set relative positioning
  G1 E-{e} F300 ; Retract
  G1 Z{z_safe} ; Lift toolhead
  G90 ; Set absolute positioning
  #G1 X{x} Y{y} F4000
  G1 X{x} F4000 ; Move toolhead to X park position

[gcode_macro RESUME]
description: Commands to run when a print is resumed from pause
rename_existing: RESUME_BASE
gcode:
  {% set e = params.E|default(1) %} # Retract length
  M118 Resuming
  G91 ; Set relative positioning
  G1 E{e} F300 ; Feed to undo retract
  G90 ; Set absolute positioning
  RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 ; Restore gcode state
  RESUME_BASE  ; Resume

[gcode_macro CANCEL_PRINT]
description: Commands to run when a print is cancelled
rename_existing: CANCEL_PRINT_BASE
gcode:
  M118 Cancelling Print
  {% set safe_y = printer["gcode_macro _User_Variables"].safe_y|default(30) %}
  {% set ENDY = printer.toolhead.axis_maximum.y - safe_y %} ; Calculate where toolhead should park in Y position
  {% set retract = params.RETRACT|default(2.0)|float %} ; Retract distance when lifting toolhead
  {% set retract_speed = params.RETRACT_SPEED|default(20)|int %}  ; Retract speed when lifting toolhead

  ##### calculate safe z lift position #####
  {% set z = params.Z|default(30)|float %} #edit to your park position
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% set lift_z = z|abs %}
  {% if act_z < (max_z - lift_z) %}
      {% set z_safe = lift_z %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}


  G91 ; Set relative positioning
  G1 E-{retract} F{retract_speed*60} ; Retract
  G1 E-{retract} Z0.2 F{retract_speed*60} ; Retract again
  
  G1 Z{z_safe} F4000 ; Lift to safe z position
  G90 ; Set absolute positioning
  G1 X0 Y{ENDY} ; Park toolhead
  M84 X Y E ; Disable steppers
  M106 S0 ; Turn off fans
  TURN_OFF_HEATERS ; Turn off heaters
  CLEAR_PAUSE ; Clear pause in case it was paused before cancelling
  SDCARD_RESET_FILE ; Reset loaded file
  CANCEL_PRINT_BASE ; Cancel

[gcode_macro M600]
description: Filament change macro, pauses the print and ejects the filament
gcode:
  {% if printer.extruder.can_extrude == 0 and printer.extruder.target < 150 %} ; Check if temperature is too low to extrude, and increase temperature if it is
    M118 Filament Change - Heating Hotend
    M109 S220
  {% endif %}  
  {% if printer.toolhead.homed_axes != "xyz" %} ; Home printer if not already
    M118 Filament Change - Homing
    G28
  {% endif %}

  {% if printer.idle_timeout.state == "Printing" %} ; If this was triggered in the middle of a print
    {% if printer.pause_resume.is_paused == 0 %} ; Pause the printer if not already paused
      PAUSE
    {% endif %}
  {% else %} ; If this macro was not triggered in the middle of a print, since the PAUSE macro did not run, we need to raise Z position
    {% set z = params.Z|default(40)|float %} ; How high to life Z

    ##### calculate safe z lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
      {% set z_safe = lift_z %}
    {% else %}
      {% set z_safe = max_z - act_z %}
    {% endif %}

    G91 ; Set relative positioning
    G1 Z{z_safe} ; Raise Z
  {% endif %}
  SAVE_GCODE_STATE NAME=M600_state ; Save current gcode state
  G91 ; Set relative positioning
  M118 Filament Change - Unloading Filament
  G1 E5 F1000 ; Extrude a little before unloading filament
  G1 E-150 F300 ; Unload filament
  M118 Filament Change - Done
  RESTORE_GCODE_STATE NAME=M600_state ; Restore gcode state



[gcode_macro DRAW_LINE]
gcode:
    {% set SPEED = params.SPEED|default(900)|int %}
    G92 E0 ; reset extruder
    G1 Z1.0 F400 ; move z axis up
    
    G1 X5.1 Y140 Z0.3 F5000  ;Move to start position
    G1 X5.1 Y40.0 Z0.3 F{SPEED} E15 ;Draw the first line
    G1 X5.4 Y40.0 Z0.3 F{SPEED} ;Move to side a little
    G1 X5.4 Y140 Z0.3 F{SPEED}.0 E30 ;Draw the second line

    G92 E0 ;Reset Extruder
    G1 Z1.0 F400 ;Move Z Axis up
    G4 P500
    G1 X8 F{SPEED} ;Move to side so it doesn't crash in to the blob

